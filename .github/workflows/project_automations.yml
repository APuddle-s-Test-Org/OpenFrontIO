name: Project automations

on:
  workflow_dispatch:
  #issues:
  #pull_request_review:
    #types: [submitted, edited]
    
env:
  ORGANIZATION: "APuddle-s-Test-Org"
  PROJECT_NUMBER: 1
  #PR_REVIEW_ID: ${{github.event.pull_request_review.review.node_id}}
  #PR_REVIEW_ID: ""
  

jobs:
  Project-automations:
    runs-on: ubuntu-latest
    steps:
      - name: Generate-token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Get-project-data
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          gh api graphql -f query='
            query($organization: String! $proj_num: Int!) {
              organization(login: $organization) {
                projectV2(number: $proj_num) {
                  id
                  fields (first: 30) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f organization=${{env.ORGANIZATION}} -F proj_num=${{env.PROJECT_NUMBER}} > project_data.json
          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'TRIAGE_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Triage") |.id' project_data.json) >> $GITHUB_ENV
          echo 'PRE_DEVELOPMENT_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Pre-Development") |.id' project_data.json) >> $GITHUB_ENV
          echo 'CONCEPT_REVIEW_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Concept Review") |.id' project_data.json) >> $GITHUB_ENV
          echo 'DEVELOPMENT_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Development") |.id' project_data.json) >> $GITHUB_ENV
          echo 'PEER_REVIEW_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Peer Review") |.id' project_data.json) >> $GITHUB_ENV
          echo 'FINAL_REVIEW_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Final Review") |.id' project_data.json) >> $GITHUB_ENV
          echo 'STALLED_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Stalled") |.id' project_data.json) >> $GITHUB_ENV
          echo 'COMPLETE_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Complete") |.id' project_data.json) >> $GITHUB_ENV

          
          echo 'CONCEPTUAL_REVIEW_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Conceptual Review Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'CONCEPT_INCOMPLETE_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Conceptual Review Status") | .options[] | select(.name=="Incomplete") |.id' project_data.json) >> $GITHUB_ENV
          echo 'CONCEPT_AWAITING_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Conceptual Review Status") | .options[] | select(.name=="Awaiting Review") |.id' project_data.json) >> $GITHUB_ENV
          echo 'CONCEPT_APPROVED_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Conceptual Review Status") | .options[] | select(.name=="Accepted") |.id' project_data.json) >> $GITHUB_ENV
          echo 'CONCEPT_REJECTED_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Conceptual Review Status") | .options[] | select(.name=="Rejected") |.id' project_data.json) >> $GITHUB_ENV
          echo 'CONCEPT_SKIPPED_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Conceptual Review Status") | .options[] | select(.name=="Skipped") |.id' project_data.json) >> $GITHUB_ENV
          
          echo 'PEER_REVIEW_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Peer Review Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'PEER_AWAITING_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Peer Review Status") | .options[] | select(.name=="Awaiting Review") |.id' project_data.json) >> $GITHUB_ENV
          echo 'PEER_UNDER_REVIEW_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Peer Review Status") | .options[] | select(.name=="Under Review") |.id' project_data.json) >> $GITHUB_ENV
          echo 'PEER_APPROVED_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Peer Review Status") | .options[] | select(.name=="Accepted") |.id' project_data.json) >> $GITHUB_ENV
          echo 'PEER_REJECTED_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Peer Review Status") | .options[] | select(.name=="Rejected") |.id' project_data.json) >> $GITHUB_ENV
          
          echo 'FINAL_REVIEW_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Final Review Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'FINAL_AWAITING_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Final Review Status") | .options[] | select(.name=="Awaiting Review") |.id' project_data.json) >> $GITHUB_ENV
          echo 'FINAL_RETURNED_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Final Review Status") | .options[] | select(.name=="Changes Requested") |.id' project_data.json) >> $GITHUB_ENV
          echo 'FINAL_APPROVED_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Final Review Status") | .options[] | select(.name=="Accepted") |.id' project_data.json) >> $GITHUB_ENV
          echo 'FINAL_REJECTED_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Final Review Status") | .options[] | select(.name=="Rejected") |.id' project_data.json) >> $GITHUB_ENV
          
          echo 'LINKED_PR_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Linked pull requests") | .id' project_data.json) >> $GITHUB_ENV
          
      - name: Get-items-data
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          gh api graphql -f query='
            query($organization: String! $proj_num: Int!) {
              organization(login: $organization) {
                projectV2(number: $proj_num) {
                  id
                  items {
                    nodes {
                      id
                      content {
                        ... on Issue {
                          title
                          number
                        }
                      }
                      fieldValues(first: 30) {
                        nodes {
                          ... on ProjectV2ItemFieldPullRequestValue {
                            pullRequests(last: 1) {
                              nodes {
                                id
                                reviews(last: 20) {
                                  nodes {
                                    author {
                                      login
                                    }
                                    state
                                    createdAt
                                  }
                                }
                              }
                            }
                            field {
                              ... on ProjectV2Field {
                                id
                                name
                              }
                            }
                          }
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            id
                            optionId
                            field {
                              ... on ProjectV2SingleSelectField {
                                id
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }' -f organization=${{env.ORGANIZATION}} -F proj_num=${{env.PROJECT_NUMBER}} > items_data.json
           
          items_data=$(items_data.json | jq -c)
          echo 'ITEMS_DATA'=$items_data >> $GITHUB_ENV
        #  PM_ITEM_ID='"PVTI_lADOC2jf2s4A2aRCzgZTfSc"'
        #  PM_ITEM=$(jq '.data.organization.projectV2.items.nodes[] | select(.id== '$PM_ITEM_ID') | .' items_data.json)
        #  approved_by_peers_1=$(echo "$PM_ITEM" | jq '[.fieldValues.nodes[] | select(has("pullRequests") and (.pullRequests.nodes | length > 0)) | .pullRequests.nodes[] | select(has("reviews") and (.reviews.nodes | length > 0)) | .reviews.nodes[] | select(.state == "APPROVED")]| length' )
        #  echo 'PM_ITEM='$PM_ITEM >> $GITHUB_ENV
        #  echo 'APPROVED_BY_PEERS='$approved_by_peers_1 >> $GITHUB_ENV
        #  echo "APPROVED_BY_MAINT=$approved_by_maint" >> $GITHUB_ENV
        
        #  approved_by_peers_1=$(jq '.fieldValues.nodes[] | select(.pullRequests?.nodes? != null) | .pullRequests.nodes[]' $PM_ITEM )
        #  approved_by_peers_2=$(jq '.reviews.nodes[] | select(.state == "APPROVED") | .author.login' approved_by_peers_1)
        #  approved_by_peers_3=$(jq ' |  | ' approved_by_peers_1)
        #  length'
        #  approved_by_peers_3=$(jq '.fieldValues.nodes[] | select(.pullRequests?.nodes? != null) | .pullRequests.nodes[] | .reviews.nodes[] | select(.state == "APPROVED") | length' $PM_ITEM)
        #  approved_by_peers_4=$(jq '.fieldValues.nodes[] | select(.pullRequests?.nodes? != null) | .pullRequests.nodes[] | .reviews.nodes[] | select(.state == "APPROVED") | length' $PM_ITEM)
        #  approved_by_peers=$(jq '.[] | select(.login!= "evanpelle" && .state=="approved") | .' $PM_ITEM)
        #  approved_by_maint=$(jq '.[] | select(.login== '"evanpelle"' && .state=='"approved"') | .' $PM_ITEM)
          
        #  echo "PM_ITEM=$PM_ITEM" >> $GITHUB_ENV
        #  echo "APPROVED_BY_PEERS=$approved_by_peers" >> $GITHUB_ENV
        #  echo "APPROVED_BY_MAINT=$approved_by_maint" >> $GITHUB_ENV
          
        #  approved_by_peers='$(jq '.data.organization.projectV2.items.nodes[] | select(.id== ${PM_ITEM_ID}) | .' items_data.json)
        #  echo 'PM_ITEM_TITLE='$(jq '.[] | select(.id== "$PM_ITEM_ID") | .content.title' $PM_ITEM) >> $GITHUB_ENV
        #  echo 'PM_ITEM_ISSUE_NUM='$(jq '.data.organization.projectV2.items.nodes[] | select(.id== "$PM_ITEM_ID") | .content.title' items_data.json) >> $GITHUB_ENV
        #  echo 'PM_ITEM_ISSUE_NUM='$(jq '.data.organization.projectV2.items.nodes[] | select(.id== "$PM_ITEM_ID") | .content.number' items_data.json) >> $GITHUB_ENV
        #  echo 'PM_ITEM_STATUS_OPTION_ID='$(jq '.data.organization.projectV2.items.nodes[] | select(.id== "$PM_ITEM_ID") | select(.fieldValues.nodes[].field.id== "$STATUS_FIELD_ID") | .fieldValues.nodes[].optionId' items_data.json) >> $GITHUB_ENV
        #  echo 'PM_ITEM_ID="$PM_ITEM_ID"' >> $GITHUB_ENV
        
      - name: write-data
        run: env
